name: run E2E tests

on:
  workflow_call:
    inputs:
        compose-repository-url:
            description: "URL of the repository to clone"
            type: string
            default: "https://github.com/Netcracker/qubership-apihub"
        compose-repository-branch:
            description: "Branch to clone"
            type: string
            default: "main"
        compose-repository-compose-folder:
            description: "Path to the folder with docker-compose file"
            type: string
            default: "docker-compose/apihub-generic"
        compose-repository-compose-file:
            description: "docker-compose filename"
            type: string
            default: "docker-compose.yml"
        postman-collections-run:
            description: "Flag for executing postman collections"
            type: boolean
            default: true
        postman-repository-url:
            description: "URL of the repository to clone"
            type: string
            default: "https://github.com/Netcracker/qubership-apihub-postman-collections"
        postman-repository-branch:
            description: "Branch to clone"
            type: string
        postman-collections-list:
            description: "Collections to execute"
            type: string
            default: "./e2e/1_1_Smoke_Portal.postman_collection.json"
        playwright-tests-run:
            description: "Flag for executing playwright tests"
            type: boolean
            default: true
        playwright-repository-url:
            description: "URL of the repository to clone"
            type: string
            default: "https://github.com/Netcracker/qubership-apihub-ui-tests"
        playwright-repository-branch:
            description: "Branch to clone"
            type: string
        playwright-test-args:
            description: "Playwright test command CLI arguments"
            type: string
            default: "--project=Portal --workers=8 --grep-invert=@flaky"
        apihub-backend-image-tag:
            description: "BE image tag to be executed"
            type: string
            default: "dev"
        apihub-build-task-consumer-image-tag:
            description: "Build Task Consumer image tag to be executed"
            type: string
            default: "dev"
        apihub-ui-image-tag:
            description: "UI image tag to be executed"
            type: string
            default: "dev"
    secrets:
        JWT_PRIVATE_KEY:
            required: true
        APIHUB_ADMIN_EMAIL:
            required: true
        APIHUB_ADMIN_PASSWORD:
            required: true
        APIHUB_ACCESS_TOKEN:
            required: true

jobs:
  run_compose_and_run_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Clone compose repository
        run: |
          git clone --branch ${{ inputs.compose-repository-branch }} --single-branch ${{ inputs.compose-repository-url }} compose-repo
      
      - name: Install Podman and envsubst
        run: |
          sudo apt-get update
          sudo apt-get install -y podman podman-compose gettext-base

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://npm.pkg.github.com/'

      - name: Template .env and config.yaml files with environment variables
        env:
          JWT_PRIVATE_KEY: ${{ secrets.JWT_PRIVATE_KEY }}
          APIHUB_ADMIN_EMAIL: ${{ secrets.APIHUB_ADMIN_EMAIL }}
          APIHUB_ADMIN_PASSWORD: ${{ secrets.APIHUB_ADMIN_PASSWORD }}
          APIHUB_ACCESS_TOKEN: ${{ secrets.APIHUB_ACCESS_TOKEN }}
        run: |
          cd compose-repo
          set
          for env_file in $(find . -name "*.env"); do
            envsubst < "$env_file" > "${env_file}.tmp"
            mv "${env_file}.tmp" "$env_file"
          done

          cd ${{ inputs.compose-repository-compose-folder }}    
          envsubst < qubership-apihub-backend-config.yaml > qubership-apihub-backend-config.yaml.tmp
          mv qubership-apihub-backend-config.yaml.tmp qubership-apihub-backend-config.yaml

      - name: Substitute docker tags in compose file
        run: |
          cd compose-repo
          cd ${{ inputs.compose-repository-compose-folder }}
          sed -i \
            -e "s|\(ghcr.io/netcracker/qubership-apihub-backend:\)[^ ]*|\1${{ inputs.apihub-backend-image-tag }}|g" \
            -e "s|\(ghcr.io/netcracker/qubership-apihub-build-task-consumer:\)[^ ]*|\1${{ inputs.apihub-build-task-consumer-image-tag }}|g" \
            -e "s|\(ghcr.io/netcracker/qubership-apihub-ui:\)[^ ]*|\1${{ inputs.apihub-ui-image-tag }}|g" \
            ./${{ inputs.compose-repository-compose-file }}
          echo "$(<./${{ inputs.compose-repository-compose-file }})"

      - name: Run podman-compose up
        run: |
          cd compose-repo
          cd ${{ inputs.compose-repository-compose-folder }}
          podman-compose -f ${{ inputs.compose-repository-compose-file }} up -d

      - name: Start contaiers logs collecting
        run: |
          podman logs -f qubership-apihub-backend > ./qubership-apihub-backend.log 2>&1 &
          podman logs -f postgres > ./postgres.log 2>&1 &
          podman logs -f qubership-apihub-ui > ./qubership-apihub-ui.log 2>&1 &
          podman logs -f qubership-apihub-build-task-consumer > ./qubership-apihub-build-task-consumer.log 2>&1 &

      - name: Wait for APIHUB startup
        run: |
          echo "Waiting for http://localhost:8081/login to return 200..."
          end_time=$((SECONDS + 60))  
          while [ $SECONDS -lt $end_time ]; do
            status_code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8081/login)
            if [ "$status_code" -eq 200 ]; then
              echo "Received HTTP 200!"
              exit 0
            else
              echo "Received HTTP $status_code. Retrying in 5 seconds..."
              sleep 5
            fi
          done
          echo "Timeout reached. Did not receive HTTP 200 within 1 minute."
          exit 1

      - name: Install Newman
        if: ${{ inputs.postman-collections-run }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm install -g newman newman-reporter-htmlextra

      - name: Calculate Newman tests branch
        id: calculate-postman-branch
        if: ${{ inputs.postman-collections-run }}
        run: |
          # First check if a branch was provided as input
          BRANCH="${{ inputs.postman-repository-branch }}"
          
          # If a branch was provided, check if it exists
          if [ -n "$BRANCH" ]; then
            if git ls-remote --heads ${{ inputs.postman-repository-url }} refs/heads/$BRANCH | grep -q $BRANCH; then
              echo "Branch $BRANCH exists in postman tests repository"
            else
              echo "Branch $BRANCH does not exist in postman tests repository, using develop instead"
              BRANCH="develop"
            fi
          else
            # If no branch was provided, default to develop
            BRANCH="develop"
            echo "No branch specified, using develop as default"
          fi
          
          echo "Using postman tests repository branch: $BRANCH"
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Clone apihub-postman-collections repository
        if: ${{ inputs.postman-collections-run }}
        run: |
          git clone --branch ${{ steps.calculate-postman-branch.outputs.branch }} --single-branch ${{ inputs.postman-repository-url }} postman-repo

      - name: Prepare env file for Newman
        if: ${{ inputs.postman-collections-run }}
        env:
          JWT_PRIVATE_KEY: ${{ secrets.JWT_PRIVATE_KEY }}
          APIHUB_ADMIN_EMAIL: ${{ secrets.APIHUB_ADMIN_EMAIL }}
          APIHUB_ADMIN_PASSWORD: ${{ secrets.APIHUB_ADMIN_PASSWORD }}
          APIHUB_ACCESS_TOKEN: ${{ secrets.APIHUB_ACCESS_TOKEN }}
        run: |
          cd postman-repo
          envsubst < ./environment/local.postman_environment.json > ./ci.postman_environment.json

      - name: Run Postman Collections with Newman
        if: ${{ inputs.postman-collections-run }}
        run: |
          cd postman-repo
          IFS=',' read -ra COLLECTIONS <<< "${{ inputs.postman-collections-list }}"
          for collection in "${COLLECTIONS[@]}"; do
            sanitized_collection_name=$(echo "$collection" | tr -d './')
            echo "Running collection: $collection"
            newman run "$collection" -e ./ci.postman_environment.json -x --reporters cli,htmlextra --reporter-htmlextra-export "./reports/${sanitized_collection_name}_results.html"
          done

      - name: Upload Newman reports as artifacts
        if: ${{ inputs.postman-collections-run }}
        uses: actions/upload-artifact@v4
        with:
          name: newman-reports
          path: |
            ${{ github.workspace }}/postman-repo/reports/*.html
            retention-days: 7

      - name: Run Newman tests results check
        id: check_newman_tests
        if: ${{ inputs.postman-collections-run }}
        continue-on-error: true
        run: |
          TOTAL_FAILED=0
               for file in ${{ github.workspace }}/postman-repo/reports/*.html; do
            FAILED_TESTS=$(grep -A1 '<h6 class="text-uppercase">Total Failed Tests</h6>' "$file" | grep -oP '(?<=<h1 class="display-1">)[0-9]+(?=</h1>)')
            TOTAL_FAILED=$((TOTAL_FAILED + FAILED_TESTS))
          done
    
          if [ "$TOTAL_FAILED" -ne 0 ]; then            
            exit 1          
          fi

      - name: Calculate Playwright tests branch
        id: calculate-playwright-branch
        if: ${{ inputs.playwright-tests-run }}
        run: |
          # First check if a branch was provided as input
          BRANCH="${{ inputs.playwright-repository-branch }}"
          
          # If a branch was provided, check if it exists
          if [ -n "$BRANCH" ]; then
            if git ls-remote --heads ${{ inputs.playwright-repository-url }} refs/heads/$BRANCH | grep -q $BRANCH; then
              echo "Branch $BRANCH exists in playwright tests repository"
            else
              echo "Branch $BRANCH does not exist in playwright tests repository, using develop instead"
              BRANCH="develop"
            fi
          else
            # If no branch was provided, default to develop
            BRANCH="develop"
            echo "No branch specified, using develop as default"
          fi
          
          echo "Using playwright tests repository branch: $BRANCH"
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Clone Playwright tests repository
        if: ${{ inputs.playwright-tests-run }}
        run: |
          git clone --branch ${{ steps.calculate-playwright-branch.outputs.branch }} --single-branch ${{ inputs.playwright-repository-url }} playwright-repo

      - name: Install Playwright
        if: ${{ inputs.playwright-tests-run }}
        working-directory: ./playwright-repo
        run: |          
          npm ci
          npx playwright install --with-deps chromium
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Playwright tests
        id: run_playwright_tests
        if: ${{ inputs.playwright-tests-run }}
        continue-on-error: true
        working-directory: ./playwright-repo
        env:
          BASE_URL: "http://localhost:8081"
          TEST_USER_PASSWORD: ${{ secrets.APIHUB_ADMIN_PASSWORD }}
          PLAYGROUND_BACKEND_HOST: "http://host.docker.internal:8081"
          CLEAR_TD: "skip"
        run: |          
          npx playwright test ${{ inputs.playwright-test-args }}          

      - name: Upload Playwright reports as artifacts
        if: ${{ inputs.playwright-tests-run }}
        uses: actions/upload-artifact@v4
        with:
          name: playwright-reports
          path: |
            ${{ github.workspace }}/playwright-repo/reports
            retention-days: 7

      - name: Upload containers logs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: containers-logs
          path: |
            ${{ github.workspace }}/*.log
            retention-days: 7

      - name: Show test run config
        run: |
          # Create the summary table
          {
            echo "## Test run configuration"
            echo "| Parameter                                | Value                                                                                    |"
            echo "|------------------------------------------|------------------------------------------------------------------------------------------|"
            echo "| **Execute BE tests**                     | **\`${{ inputs.postman-collections-run }}\`**                                            |"
            echo "| Postman collections branch to clone      | \`${{ steps.calculate-postman-branch.outputs.branch || 'branch was not calculated' }}\`  |"
            
            # Build collections list - split comma-separated string into separate lines
            # to avoid breaking table formatting with very long single line
          
            echo -n "| Postman collections to execute | "
            IFS=',' read -ra COLLECTIONS <<< "${{ inputs.postman-collections-list }}"
            for i in "${!COLLECTIONS[@]}"; do
              if [ $i -gt 0 ]; then
                echo -n "<br>"
              fi
              echo -n "\`${COLLECTIONS[$i]}\`"
            done
            echo " |"
            
            echo "| **Execute UI tests**                  | **\`${{ inputs.playwright-tests-run }}\`**                                                 |"
            echo "| Playwright branch to clone            | \`${{ steps.calculate-playwright-branch.outputs.branch || 'branch was not calculated' }}\` |"
            echo "| Playwright test command CLI arguments | \`${{ inputs.playwright-test-args }}\`                                                     |"
            echo "| Backend docker image tag              | \`${{ inputs.apihub-backend-image-tag }}\`                                                 |"
            echo "| Build Task Consumer docker image tag  | \`${{ inputs.apihub-build-task-consumer-image-tag }}\`                                     |"
            echo "| UI docker image tag                   | \`${{ inputs.apihub-ui-image-tag }}\`                                                      |"
          } >> $GITHUB_STEP_SUMMARY

      - name: Fail job if there are failed tests
        run: |
          if [ "${{ steps.check_newman_tests.outcome }}" == "failure" ]; then
            echo "Newman tests failed"
          fi
          if [ "${{ steps.run_playwright_tests.outcome }}" == "failure" ]; then
            echo "Playwright tests failed"
          fi
          if [ "${{ steps.check_newman_tests.outcome }}" == "failure" ] || [ "${{ steps.run_playwright_tests.outcome }}" == "failure" ]; then
            exit 1
          fi
