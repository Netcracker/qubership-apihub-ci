name: frontend-ci

on:
  workflow_call:
    inputs:
      install_dependencies_timeout:
        description: "Timeout for the 'Install dependencies' step in minutes"
        required: false
        default: 10
        type: number
    outputs:
      npm_dist_tag:
        description: "NPM dist-tag of the published package."
        value: ${{ jobs.on-push.outputs.npm_dist_tag }}
      package_version:
        description: "NPM version of the published package."
        value: ${{ jobs.on-push.outputs.package_version }}      

jobs:
  on-push:
    if: (github.event_name == 'push') || (github.event_name == 'pull_request')
    runs-on: ubuntu-latest
    outputs:
      npm_dist_tag: ${{ steps.publish.outputs.npm_dist_tag }}
      package_version: ${{ steps.get_version.outputs.package_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://npm.pkg.github.com/'

      - name: Install dependencies
        run: npm ci
        timeout-minutes: ${{ inputs.install_dependencies_timeout }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # remove once all components have update-lock-file npm script
      - name: Update dependencies (deprecated)
        run: npm ls --json |  jq -r '.dependencies | keys[]' | grep "@netcracker" | xargs --no-run-if-empty npm update
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # This step is to update internal dependencies specified via dist tag version to their latest available versions
      - name: Update dependencies
        run: npm run update-lock-file --if-present
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Calculate NPM dist tag
        id: calculate_npm_dist_tag
        run: |          
          REF=${{ github.ref }}
          echo "REF: $REF"
          NPM_DIST_TAG=$(echo $REF | sed 's@^refs/tags/.*@latest@;s@^refs/heads/@@;s@^refs/pull/@pull/@;s@^develop$@dev@;s@^release$@next@;s@^main$@@;s@/@-@g;')
          echo "NPM_DIST_TAG: $NPM_DIST_TAG"
          echo "npm_dist_tag=$NPM_DIST_TAG" >> $GITHUB_OUTPUT

      - name: Calculate prerelease suffix
        id: calculate_prerelease_suffix        
        run: |          
          NPM_DIST_TAG="${{ steps.calculate_npm_dist_tag.outputs.npm_dist_tag }}"
          if [ -n "$NPM_DIST_TAG" ] && [ "$NPM_DIST_TAG" != "latest" ]; then
            PRERELEASE_SUFFIX="$NPM_DIST_TAG"
          else
            PRERELEASE_SUFFIX=''
          fi
          echo "PRERELEASE_SUFFIX: $PRERELEASE_SUFFIX"
          echo "prerelease_suffix=$PRERELEASE_SUFFIX" >> $GITHUB_OUTPUT        

      - name: Check is Lerna project
        run: |
          if [ -f lerna.json ]; then
            echo "Project is a Lerna project."
            echo "IS_LERNA=true" >> $GITHUB_ENV
          else
            echo "Project is NOT a Lerna project."
            echo "IS_LERNA=false" >> $GITHUB_ENV
          fi

      - name: Bump version (dev branches only)        
        if: steps.calculate_prerelease_suffix.outputs.prerelease_suffix != ''
        run: |          
          # Get the current version and extract release part
          if [ "$IS_LERNA" == "true" ]; then
            CURRENT_VERSION=$(lerna list --json | jq -r '.[0].version')
          else
            CURRENT_VERSION=$(jq -r '.version' package.json)
          fi
          
          # Extract release part (remove any prerelease suffix if exists)
          RELEASE_VERSION=$(echo "$CURRENT_VERSION" | sed -E 's/(-[^+]+)?(\+[^+]+)?$//')
          
          # Generate timestamp in YYYYMMDDHHmmss format
          TIMESTAMP=$(date -u '+%Y%m%d%H%M%S')
          
          # Construct new version
          NEW_VERSION="${RELEASE_VERSION}-${{ steps.calculate_prerelease_suffix.outputs.prerelease_suffix }}.${TIMESTAMP}"
          
          echo "NEW_VERSION: $NEW_VERSION"
          
          # Set the new version
          if [ "$IS_LERNA" == "true" ]; then
            lerna version "${NEW_VERSION}" --no-git-tag-version --no-private --no-push --yes              
          else
            npm version "${NEW_VERSION}" --no-git-tag-version
          fi

      - name: Get package version
        id: get_version
        run: |
          if [ "$IS_LERNA" == "true" ]; then
            VERSION=$(lerna list --json | jq -r '.[0].version')
          else
            VERSION=$(jq -r '.version' package.json)
          fi
          echo "package_version=$VERSION" >> $GITHUB_OUTPUT
      
      # lerna won't publish packages with working directory changes
      - name: Commit changes (if any)                
        run: |
          # Check if there are any changes to commit
          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes detected. Preparing to commit."
            git config --global user.name "github-actions"
            git config --global user.email "github-actions@github.com"
            git add .
            git commit -m "chore: bump prerelease version"            
          else
            echo "No changes to commit."
          fi

      - name: Build the package
        run: npm run build --if-present

      - name: Run tests
        run: npm test --if-present

      - name: Publish to GitHub NPM Registry
        id: publish
        if: steps.calculate_npm_dist_tag.outputs.npm_dist_tag != ''
        run: |
          if [ "$IS_LERNA" == "true" ]; then
            lerna publish from-package --yes --no-push --no-git-reset --no-git-tag-version --dist-tag ${{ steps.calculate_npm_dist_tag.outputs.npm_dist_tag }}  
          else
            npm publish --tag ${{ steps.calculate_npm_dist_tag.outputs.npm_dist_tag }}
          fi          
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}      